Wzorce strukturalne - dołożenie dodatkowych funkcjonalności do aplikacji bez zmiany klas bazowych

proxy - zapewnia warstwę pośrednią - bezpieczeństwa lub "cache" (pamięć podręczna, "blisko miejsca zastosowania")

flyweight (pyłek) - chodzi o to że tworzenie obiektów jest drogie (zajmuje czas, pamięć i moc obliczeniową).
Jeśli mamy obiekt który możemy rozdzielić na "część typową" i "część specyficzną" to "część typowa" może być
odkładana do "gotowców" i możemy z tego korzystać n razy, nie tworząc od nowa całości

dekorator - mamy obiekt "podstawowy" i mamy obiekty tej samej klasy (interfejsu)
ale z dodatkowymi funkcjonalnościami, możliwościami

adapter - potrzebny gdy mamy obiekty na których chcemy wykonać podobną akcję ale one różnią się wartościami (KMH / MPH)
albo np. potrzebujemy przystosować dane do innego systemu (wartości prądu, waluty, szerokości torów)

fasada - służy do tego zeby nie udostępniać poza własne moduły zbyt wielu "niskopoziomowych" funkcjonalności:
klient ma wywołać 1 metodę do generowania raportu a nie łączyć się z bazą, tworzyć obiekty itp.
bo klient może nawet nie wiedzieć że jest lepsze wyjście ale takie mu po prostu zadziałało,
dlatego lepiej jest schować za uprawnieniami (private, proteted, package private) to z czego klient
ma nie korzystać, a wystawić tylko API - metody dedykowane do wykorzystania przez klienta

Bridge - służy do oddzielania warstwy implementacji od warstwy abstrakcji. Polega to na tym że definiuje się szablony
(klasy abstrakcyjne i interfejsy) jakiejś funkcjonalności, a następnie implementacja może być powierzona
kilku niezależnym zespołom